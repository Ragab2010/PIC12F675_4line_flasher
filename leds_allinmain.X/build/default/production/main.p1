Version 3.2 HI-TECH Software Intermediate Code
[p mainexit ]
"111 main.c
[v _gpio_init `(v ~T0 @X0 0 ef ]
"106
[v _InitADC `(v ~T0 @X0 0 ef1`uc ]
"92
[v _forwardBackwordLightOneOnlyAndRevese `(v ~T0 @X0 0 ef1`uc ]
"87
[v _forwardBackStepByStep `(v ~T0 @X0 0 ef1`uc ]
"88
[v _forwardBackStepByStepReverse `(v ~T0 @X0 0 ef1`uc ]
"89
[v _togaleLeds `(v ~T0 @X0 0 ef2`uc`uc ]
"1374 /opt/microchip/xc8/v1.36/include/pic12f675.h
[v _ANSEL `Vuc ~T0 @X0 0 e@159 ]
"627
[v _ADCON0 `Vuc ~T0 @X0 0 e@31 ]
"550
[v _CMCON `Vuc ~T0 @X0 0 e@25 ]
"1184
[v _VRCON `Vuc ~T0 @X0 0 e@153 ]
"779
[v _TRISIO `Vuc ~T0 @X0 0 e@133 ]
"212
[v _GPIO `Vuc ~T0 @X0 0 e@5 ]
[v F666 `(v ~T0 @X0 1 tf1`ul ]
"152 /opt/microchip/xc8/v1.36/include/pic.h
[v __delay `JF666 ~T0 @X0 0 e ]
[p i __delay ]
"1517 /opt/microchip/xc8/v1.36/include/pic12f675.h
[v _GO_nDONE `Vb ~T0 @X0 0 e@249 ]
"608
[v _ADRESH `Vuc ~T0 @X0 0 e@30 ]
"1355
[v _ADRESL `Vuc ~T0 @X0 0 e@158 ]
"8 main.c
[p x FOSC=INTRCIO ]
"9
[p x WDTE=OFF ]
"10
[p x PWRTE=OFF ]
"11
[p x MCLRE=OFF ]
"12
[p x BOREN=OFF ]
"13
[p x CP=OFF ]
"14
[p x CPD=OFF ]
[; ;htc.h: 26: extern const char __xc8_OPTIM_SPEED;
[; ;htc.h: 28: extern double __fpnormalize(double);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;pic.h: 9: extern unsigned char __osccal_val(void);
[; ;pic12f675.h: 49: extern volatile unsigned char INDF @ 0x000;
"51 /opt/microchip/xc8/v1.36/include/pic12f675.h
[; ;pic12f675.h: 51: asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
[; ;pic12f675.h: 54: typedef union {
[; ;pic12f675.h: 55: struct {
[; ;pic12f675.h: 56: unsigned INDF :8;
[; ;pic12f675.h: 57: };
[; ;pic12f675.h: 58: } INDFbits_t;
[; ;pic12f675.h: 59: extern volatile INDFbits_t INDFbits @ 0x000;
[; ;pic12f675.h: 68: extern volatile unsigned char TMR0 @ 0x001;
"70
[; ;pic12f675.h: 70: asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
[; ;pic12f675.h: 73: typedef union {
[; ;pic12f675.h: 74: struct {
[; ;pic12f675.h: 75: unsigned TMR0 :8;
[; ;pic12f675.h: 76: };
[; ;pic12f675.h: 77: } TMR0bits_t;
[; ;pic12f675.h: 78: extern volatile TMR0bits_t TMR0bits @ 0x001;
[; ;pic12f675.h: 87: extern volatile unsigned char PCL @ 0x002;
"89
[; ;pic12f675.h: 89: asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
[; ;pic12f675.h: 92: typedef union {
[; ;pic12f675.h: 93: struct {
[; ;pic12f675.h: 94: unsigned PCL :8;
[; ;pic12f675.h: 95: };
[; ;pic12f675.h: 96: } PCLbits_t;
[; ;pic12f675.h: 97: extern volatile PCLbits_t PCLbits @ 0x002;
[; ;pic12f675.h: 106: extern volatile unsigned char STATUS @ 0x003;
"108
[; ;pic12f675.h: 108: asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
[; ;pic12f675.h: 111: typedef union {
[; ;pic12f675.h: 112: struct {
[; ;pic12f675.h: 113: unsigned C :1;
[; ;pic12f675.h: 114: unsigned DC :1;
[; ;pic12f675.h: 115: unsigned Z :1;
[; ;pic12f675.h: 116: unsigned nPD :1;
[; ;pic12f675.h: 117: unsigned nTO :1;
[; ;pic12f675.h: 118: unsigned RP :2;
[; ;pic12f675.h: 119: unsigned IRP :1;
[; ;pic12f675.h: 120: };
[; ;pic12f675.h: 121: struct {
[; ;pic12f675.h: 122: unsigned :5;
[; ;pic12f675.h: 123: unsigned RP0 :1;
[; ;pic12f675.h: 124: unsigned RP1 :1;
[; ;pic12f675.h: 125: };
[; ;pic12f675.h: 126: struct {
[; ;pic12f675.h: 127: unsigned CARRY :1;
[; ;pic12f675.h: 128: };
[; ;pic12f675.h: 129: struct {
[; ;pic12f675.h: 130: unsigned :2;
[; ;pic12f675.h: 131: unsigned ZERO :1;
[; ;pic12f675.h: 132: };
[; ;pic12f675.h: 133: } STATUSbits_t;
[; ;pic12f675.h: 134: extern volatile STATUSbits_t STATUSbits @ 0x003;
[; ;pic12f675.h: 193: extern volatile unsigned char FSR @ 0x004;
"195
[; ;pic12f675.h: 195: asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
[; ;pic12f675.h: 198: typedef union {
[; ;pic12f675.h: 199: struct {
[; ;pic12f675.h: 200: unsigned FSR :8;
[; ;pic12f675.h: 201: };
[; ;pic12f675.h: 202: } FSRbits_t;
[; ;pic12f675.h: 203: extern volatile FSRbits_t FSRbits @ 0x004;
[; ;pic12f675.h: 212: extern volatile unsigned char GPIO @ 0x005;
"214
[; ;pic12f675.h: 214: asm("GPIO equ 05h");
[; <" GPIO equ 05h ;# ">
[; ;pic12f675.h: 217: typedef union {
[; ;pic12f675.h: 218: struct {
[; ;pic12f675.h: 219: unsigned GP0 :1;
[; ;pic12f675.h: 220: unsigned GP1 :1;
[; ;pic12f675.h: 221: unsigned GP2 :1;
[; ;pic12f675.h: 222: unsigned GP3 :1;
[; ;pic12f675.h: 223: unsigned GP4 :1;
[; ;pic12f675.h: 224: unsigned GP5 :1;
[; ;pic12f675.h: 225: };
[; ;pic12f675.h: 226: struct {
[; ;pic12f675.h: 227: unsigned GPIO0 :1;
[; ;pic12f675.h: 228: unsigned GPIO1 :1;
[; ;pic12f675.h: 229: unsigned GPIO2 :1;
[; ;pic12f675.h: 230: unsigned GPIO3 :1;
[; ;pic12f675.h: 231: unsigned GPIO4 :1;
[; ;pic12f675.h: 232: unsigned GPIO5 :1;
[; ;pic12f675.h: 233: };
[; ;pic12f675.h: 234: } GPIObits_t;
[; ;pic12f675.h: 235: extern volatile GPIObits_t GPIObits @ 0x005;
[; ;pic12f675.h: 299: extern volatile unsigned char PCLATH @ 0x00A;
"301
[; ;pic12f675.h: 301: asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
[; ;pic12f675.h: 304: typedef union {
[; ;pic12f675.h: 305: struct {
[; ;pic12f675.h: 306: unsigned PCLATH :5;
[; ;pic12f675.h: 307: };
[; ;pic12f675.h: 308: } PCLATHbits_t;
[; ;pic12f675.h: 309: extern volatile PCLATHbits_t PCLATHbits @ 0x00A;
[; ;pic12f675.h: 318: extern volatile unsigned char INTCON @ 0x00B;
"320
[; ;pic12f675.h: 320: asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
[; ;pic12f675.h: 323: typedef union {
[; ;pic12f675.h: 324: struct {
[; ;pic12f675.h: 325: unsigned GPIF :1;
[; ;pic12f675.h: 326: unsigned INTF :1;
[; ;pic12f675.h: 327: unsigned T0IF :1;
[; ;pic12f675.h: 328: unsigned GPIE :1;
[; ;pic12f675.h: 329: unsigned INTE :1;
[; ;pic12f675.h: 330: unsigned T0IE :1;
[; ;pic12f675.h: 331: unsigned PEIE :1;
[; ;pic12f675.h: 332: unsigned GIE :1;
[; ;pic12f675.h: 333: };
[; ;pic12f675.h: 334: struct {
[; ;pic12f675.h: 335: unsigned :2;
[; ;pic12f675.h: 336: unsigned TMR0IF :1;
[; ;pic12f675.h: 337: unsigned :2;
[; ;pic12f675.h: 338: unsigned TMR0IE :1;
[; ;pic12f675.h: 339: };
[; ;pic12f675.h: 340: } INTCONbits_t;
[; ;pic12f675.h: 341: extern volatile INTCONbits_t INTCONbits @ 0x00B;
[; ;pic12f675.h: 395: extern volatile unsigned char PIR1 @ 0x00C;
"397
[; ;pic12f675.h: 397: asm("PIR1 equ 0Ch");
[; <" PIR1 equ 0Ch ;# ">
[; ;pic12f675.h: 400: typedef union {
[; ;pic12f675.h: 401: struct {
[; ;pic12f675.h: 402: unsigned TMR1IF :1;
[; ;pic12f675.h: 403: unsigned :2;
[; ;pic12f675.h: 404: unsigned CMIF :1;
[; ;pic12f675.h: 405: unsigned :2;
[; ;pic12f675.h: 406: unsigned ADIF :1;
[; ;pic12f675.h: 407: unsigned EEIF :1;
[; ;pic12f675.h: 408: };
[; ;pic12f675.h: 409: struct {
[; ;pic12f675.h: 410: unsigned T1IF :1;
[; ;pic12f675.h: 411: };
[; ;pic12f675.h: 412: } PIR1bits_t;
[; ;pic12f675.h: 413: extern volatile PIR1bits_t PIR1bits @ 0x00C;
[; ;pic12f675.h: 442: extern volatile unsigned short TMR1 @ 0x00E;
"444
[; ;pic12f675.h: 444: asm("TMR1 equ 0Eh");
[; <" TMR1 equ 0Eh ;# ">
[; ;pic12f675.h: 448: extern volatile unsigned char TMR1L @ 0x00E;
"450
[; ;pic12f675.h: 450: asm("TMR1L equ 0Eh");
[; <" TMR1L equ 0Eh ;# ">
[; ;pic12f675.h: 453: typedef union {
[; ;pic12f675.h: 454: struct {
[; ;pic12f675.h: 455: unsigned TMR1L :8;
[; ;pic12f675.h: 456: };
[; ;pic12f675.h: 457: } TMR1Lbits_t;
[; ;pic12f675.h: 458: extern volatile TMR1Lbits_t TMR1Lbits @ 0x00E;
[; ;pic12f675.h: 467: extern volatile unsigned char TMR1H @ 0x00F;
"469
[; ;pic12f675.h: 469: asm("TMR1H equ 0Fh");
[; <" TMR1H equ 0Fh ;# ">
[; ;pic12f675.h: 472: typedef union {
[; ;pic12f675.h: 473: struct {
[; ;pic12f675.h: 474: unsigned TMR1H :8;
[; ;pic12f675.h: 475: };
[; ;pic12f675.h: 476: } TMR1Hbits_t;
[; ;pic12f675.h: 477: extern volatile TMR1Hbits_t TMR1Hbits @ 0x00F;
[; ;pic12f675.h: 486: extern volatile unsigned char T1CON @ 0x010;
"488
[; ;pic12f675.h: 488: asm("T1CON equ 010h");
[; <" T1CON equ 010h ;# ">
[; ;pic12f675.h: 491: typedef union {
[; ;pic12f675.h: 492: struct {
[; ;pic12f675.h: 493: unsigned TMR1ON :1;
[; ;pic12f675.h: 494: unsigned TMR1CS :1;
[; ;pic12f675.h: 495: unsigned nT1SYNC :1;
[; ;pic12f675.h: 496: unsigned T1OSCEN :1;
[; ;pic12f675.h: 497: unsigned T1CKPS :2;
[; ;pic12f675.h: 498: unsigned TMR1GE :1;
[; ;pic12f675.h: 499: };
[; ;pic12f675.h: 500: struct {
[; ;pic12f675.h: 501: unsigned :4;
[; ;pic12f675.h: 502: unsigned T1CKPS0 :1;
[; ;pic12f675.h: 503: unsigned T1CKPS1 :1;
[; ;pic12f675.h: 504: };
[; ;pic12f675.h: 505: } T1CONbits_t;
[; ;pic12f675.h: 506: extern volatile T1CONbits_t T1CONbits @ 0x010;
[; ;pic12f675.h: 550: extern volatile unsigned char CMCON @ 0x019;
"552
[; ;pic12f675.h: 552: asm("CMCON equ 019h");
[; <" CMCON equ 019h ;# ">
[; ;pic12f675.h: 555: typedef union {
[; ;pic12f675.h: 556: struct {
[; ;pic12f675.h: 557: unsigned CM :3;
[; ;pic12f675.h: 558: unsigned CIS :1;
[; ;pic12f675.h: 559: unsigned CINV :1;
[; ;pic12f675.h: 560: unsigned :1;
[; ;pic12f675.h: 561: unsigned COUT :1;
[; ;pic12f675.h: 562: };
[; ;pic12f675.h: 563: struct {
[; ;pic12f675.h: 564: unsigned CM0 :1;
[; ;pic12f675.h: 565: unsigned CM1 :1;
[; ;pic12f675.h: 566: unsigned CM2 :1;
[; ;pic12f675.h: 567: };
[; ;pic12f675.h: 568: } CMCONbits_t;
[; ;pic12f675.h: 569: extern volatile CMCONbits_t CMCONbits @ 0x019;
[; ;pic12f675.h: 608: extern volatile unsigned char ADRESH @ 0x01E;
"610
[; ;pic12f675.h: 610: asm("ADRESH equ 01Eh");
[; <" ADRESH equ 01Eh ;# ">
[; ;pic12f675.h: 613: typedef union {
[; ;pic12f675.h: 614: struct {
[; ;pic12f675.h: 615: unsigned ADRESH :8;
[; ;pic12f675.h: 616: };
[; ;pic12f675.h: 617: } ADRESHbits_t;
[; ;pic12f675.h: 618: extern volatile ADRESHbits_t ADRESHbits @ 0x01E;
[; ;pic12f675.h: 627: extern volatile unsigned char ADCON0 @ 0x01F;
"629
[; ;pic12f675.h: 629: asm("ADCON0 equ 01Fh");
[; <" ADCON0 equ 01Fh ;# ">
[; ;pic12f675.h: 632: typedef union {
[; ;pic12f675.h: 633: struct {
[; ;pic12f675.h: 634: unsigned ADON :1;
[; ;pic12f675.h: 635: unsigned GO_nDONE :1;
[; ;pic12f675.h: 636: unsigned CHS :2;
[; ;pic12f675.h: 637: unsigned :2;
[; ;pic12f675.h: 638: unsigned VCFG :1;
[; ;pic12f675.h: 639: unsigned ADFM :1;
[; ;pic12f675.h: 640: };
[; ;pic12f675.h: 641: struct {
[; ;pic12f675.h: 642: unsigned :1;
[; ;pic12f675.h: 643: unsigned GO_DONE :1;
[; ;pic12f675.h: 644: unsigned CHS0 :1;
[; ;pic12f675.h: 645: unsigned CHS1 :1;
[; ;pic12f675.h: 646: };
[; ;pic12f675.h: 647: struct {
[; ;pic12f675.h: 648: unsigned :1;
[; ;pic12f675.h: 649: unsigned nDONE :1;
[; ;pic12f675.h: 650: };
[; ;pic12f675.h: 651: struct {
[; ;pic12f675.h: 652: unsigned :1;
[; ;pic12f675.h: 653: unsigned GO :1;
[; ;pic12f675.h: 654: };
[; ;pic12f675.h: 655: } ADCON0bits_t;
[; ;pic12f675.h: 656: extern volatile ADCON0bits_t ADCON0bits @ 0x01F;
[; ;pic12f675.h: 710: extern volatile unsigned char OPTION_REG @ 0x081;
"712
[; ;pic12f675.h: 712: asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
[; ;pic12f675.h: 715: typedef union {
[; ;pic12f675.h: 716: struct {
[; ;pic12f675.h: 717: unsigned PS :3;
[; ;pic12f675.h: 718: unsigned PSA :1;
[; ;pic12f675.h: 719: unsigned T0SE :1;
[; ;pic12f675.h: 720: unsigned T0CS :1;
[; ;pic12f675.h: 721: unsigned INTEDG :1;
[; ;pic12f675.h: 722: unsigned nGPPU :1;
[; ;pic12f675.h: 723: };
[; ;pic12f675.h: 724: struct {
[; ;pic12f675.h: 725: unsigned PS0 :1;
[; ;pic12f675.h: 726: unsigned PS1 :1;
[; ;pic12f675.h: 727: unsigned PS2 :1;
[; ;pic12f675.h: 728: };
[; ;pic12f675.h: 729: } OPTION_REGbits_t;
[; ;pic12f675.h: 730: extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;
[; ;pic12f675.h: 779: extern volatile unsigned char TRISIO @ 0x085;
"781
[; ;pic12f675.h: 781: asm("TRISIO equ 085h");
[; <" TRISIO equ 085h ;# ">
[; ;pic12f675.h: 784: typedef union {
[; ;pic12f675.h: 785: struct {
[; ;pic12f675.h: 786: unsigned TRISIO0 :1;
[; ;pic12f675.h: 787: unsigned TRISIO1 :1;
[; ;pic12f675.h: 788: unsigned TRISIO2 :1;
[; ;pic12f675.h: 789: unsigned TRISIO3 :1;
[; ;pic12f675.h: 790: unsigned TRISIO4 :1;
[; ;pic12f675.h: 791: unsigned TRISIO5 :1;
[; ;pic12f675.h: 792: };
[; ;pic12f675.h: 793: } TRISIObits_t;
[; ;pic12f675.h: 794: extern volatile TRISIObits_t TRISIObits @ 0x085;
[; ;pic12f675.h: 828: extern volatile unsigned char PIE1 @ 0x08C;
"830
[; ;pic12f675.h: 830: asm("PIE1 equ 08Ch");
[; <" PIE1 equ 08Ch ;# ">
[; ;pic12f675.h: 833: typedef union {
[; ;pic12f675.h: 834: struct {
[; ;pic12f675.h: 835: unsigned TMR1IE :1;
[; ;pic12f675.h: 836: unsigned :2;
[; ;pic12f675.h: 837: unsigned CMIE :1;
[; ;pic12f675.h: 838: unsigned :2;
[; ;pic12f675.h: 839: unsigned ADIE :1;
[; ;pic12f675.h: 840: unsigned EEIE :1;
[; ;pic12f675.h: 841: };
[; ;pic12f675.h: 842: struct {
[; ;pic12f675.h: 843: unsigned T1IE :1;
[; ;pic12f675.h: 844: };
[; ;pic12f675.h: 845: } PIE1bits_t;
[; ;pic12f675.h: 846: extern volatile PIE1bits_t PIE1bits @ 0x08C;
[; ;pic12f675.h: 875: extern volatile unsigned char PCON @ 0x08E;
"877
[; ;pic12f675.h: 877: asm("PCON equ 08Eh");
[; <" PCON equ 08Eh ;# ">
[; ;pic12f675.h: 880: typedef union {
[; ;pic12f675.h: 881: struct {
[; ;pic12f675.h: 882: unsigned nBOR :1;
[; ;pic12f675.h: 883: unsigned nPOR :1;
[; ;pic12f675.h: 884: };
[; ;pic12f675.h: 885: struct {
[; ;pic12f675.h: 886: unsigned nBOD :1;
[; ;pic12f675.h: 887: };
[; ;pic12f675.h: 888: } PCONbits_t;
[; ;pic12f675.h: 889: extern volatile PCONbits_t PCONbits @ 0x08E;
[; ;pic12f675.h: 908: extern volatile unsigned char OSCCAL @ 0x090;
"910
[; ;pic12f675.h: 910: asm("OSCCAL equ 090h");
[; <" OSCCAL equ 090h ;# ">
[; ;pic12f675.h: 913: typedef union {
[; ;pic12f675.h: 914: struct {
[; ;pic12f675.h: 915: unsigned :2;
[; ;pic12f675.h: 916: unsigned CAL :6;
[; ;pic12f675.h: 917: };
[; ;pic12f675.h: 918: struct {
[; ;pic12f675.h: 919: unsigned :2;
[; ;pic12f675.h: 920: unsigned CAL0 :1;
[; ;pic12f675.h: 921: unsigned CAL1 :1;
[; ;pic12f675.h: 922: unsigned CAL2 :1;
[; ;pic12f675.h: 923: unsigned CAL3 :1;
[; ;pic12f675.h: 924: unsigned CAL4 :1;
[; ;pic12f675.h: 925: unsigned CAL5 :1;
[; ;pic12f675.h: 926: };
[; ;pic12f675.h: 927: } OSCCALbits_t;
[; ;pic12f675.h: 928: extern volatile OSCCALbits_t OSCCALbits @ 0x090;
[; ;pic12f675.h: 967: extern volatile unsigned char WPU @ 0x095;
"969
[; ;pic12f675.h: 969: asm("WPU equ 095h");
[; <" WPU equ 095h ;# ">
[; ;pic12f675.h: 972: typedef union {
[; ;pic12f675.h: 973: struct {
[; ;pic12f675.h: 974: unsigned WPU0 :1;
[; ;pic12f675.h: 975: unsigned WPU1 :1;
[; ;pic12f675.h: 976: unsigned WPU2 :1;
[; ;pic12f675.h: 977: unsigned :1;
[; ;pic12f675.h: 978: unsigned WPU4 :1;
[; ;pic12f675.h: 979: unsigned WPU5 :1;
[; ;pic12f675.h: 980: };
[; ;pic12f675.h: 981: } WPUbits_t;
[; ;pic12f675.h: 982: extern volatile WPUbits_t WPUbits @ 0x095;
[; ;pic12f675.h: 1011: extern volatile unsigned char IOC @ 0x096;
"1013
[; ;pic12f675.h: 1013: asm("IOC equ 096h");
[; <" IOC equ 096h ;# ">
[; ;pic12f675.h: 1016: extern volatile unsigned char IOCB @ 0x096;
"1018
[; ;pic12f675.h: 1018: asm("IOCB equ 096h");
[; <" IOCB equ 096h ;# ">
[; ;pic12f675.h: 1021: typedef union {
[; ;pic12f675.h: 1022: struct {
[; ;pic12f675.h: 1023: unsigned IOC0 :1;
[; ;pic12f675.h: 1024: unsigned IOC1 :1;
[; ;pic12f675.h: 1025: unsigned IOC2 :1;
[; ;pic12f675.h: 1026: unsigned IOC3 :1;
[; ;pic12f675.h: 1027: unsigned IOC4 :1;
[; ;pic12f675.h: 1028: unsigned IOC5 :1;
[; ;pic12f675.h: 1029: };
[; ;pic12f675.h: 1030: struct {
[; ;pic12f675.h: 1031: unsigned IOCB0 :1;
[; ;pic12f675.h: 1032: unsigned IOCB1 :1;
[; ;pic12f675.h: 1033: unsigned IOCB2 :1;
[; ;pic12f675.h: 1034: unsigned IOCB3 :1;
[; ;pic12f675.h: 1035: unsigned IOCB4 :1;
[; ;pic12f675.h: 1036: unsigned IOCB5 :1;
[; ;pic12f675.h: 1037: };
[; ;pic12f675.h: 1038: } IOCbits_t;
[; ;pic12f675.h: 1039: extern volatile IOCbits_t IOCbits @ 0x096;
[; ;pic12f675.h: 1102: typedef union {
[; ;pic12f675.h: 1103: struct {
[; ;pic12f675.h: 1104: unsigned IOC0 :1;
[; ;pic12f675.h: 1105: unsigned IOC1 :1;
[; ;pic12f675.h: 1106: unsigned IOC2 :1;
[; ;pic12f675.h: 1107: unsigned IOC3 :1;
[; ;pic12f675.h: 1108: unsigned IOC4 :1;
[; ;pic12f675.h: 1109: unsigned IOC5 :1;
[; ;pic12f675.h: 1110: };
[; ;pic12f675.h: 1111: struct {
[; ;pic12f675.h: 1112: unsigned IOCB0 :1;
[; ;pic12f675.h: 1113: unsigned IOCB1 :1;
[; ;pic12f675.h: 1114: unsigned IOCB2 :1;
[; ;pic12f675.h: 1115: unsigned IOCB3 :1;
[; ;pic12f675.h: 1116: unsigned IOCB4 :1;
[; ;pic12f675.h: 1117: unsigned IOCB5 :1;
[; ;pic12f675.h: 1118: };
[; ;pic12f675.h: 1119: } IOCBbits_t;
[; ;pic12f675.h: 1120: extern volatile IOCBbits_t IOCBbits @ 0x096;
[; ;pic12f675.h: 1184: extern volatile unsigned char VRCON @ 0x099;
"1186
[; ;pic12f675.h: 1186: asm("VRCON equ 099h");
[; <" VRCON equ 099h ;# ">
[; ;pic12f675.h: 1189: typedef union {
[; ;pic12f675.h: 1190: struct {
[; ;pic12f675.h: 1191: unsigned VR :4;
[; ;pic12f675.h: 1192: unsigned :1;
[; ;pic12f675.h: 1193: unsigned VRR :1;
[; ;pic12f675.h: 1194: unsigned :1;
[; ;pic12f675.h: 1195: unsigned VREN :1;
[; ;pic12f675.h: 1196: };
[; ;pic12f675.h: 1197: struct {
[; ;pic12f675.h: 1198: unsigned VR0 :1;
[; ;pic12f675.h: 1199: unsigned VR1 :1;
[; ;pic12f675.h: 1200: unsigned VR2 :1;
[; ;pic12f675.h: 1201: unsigned VR3 :1;
[; ;pic12f675.h: 1202: };
[; ;pic12f675.h: 1203: } VRCONbits_t;
[; ;pic12f675.h: 1204: extern volatile VRCONbits_t VRCONbits @ 0x099;
[; ;pic12f675.h: 1243: extern volatile unsigned char EEDATA @ 0x09A;
"1245
[; ;pic12f675.h: 1245: asm("EEDATA equ 09Ah");
[; <" EEDATA equ 09Ah ;# ">
[; ;pic12f675.h: 1248: extern volatile unsigned char EEDAT @ 0x09A;
"1250
[; ;pic12f675.h: 1250: asm("EEDAT equ 09Ah");
[; <" EEDAT equ 09Ah ;# ">
[; ;pic12f675.h: 1253: typedef union {
[; ;pic12f675.h: 1254: struct {
[; ;pic12f675.h: 1255: unsigned EEDATA :8;
[; ;pic12f675.h: 1256: };
[; ;pic12f675.h: 1257: } EEDATAbits_t;
[; ;pic12f675.h: 1258: extern volatile EEDATAbits_t EEDATAbits @ 0x09A;
[; ;pic12f675.h: 1266: typedef union {
[; ;pic12f675.h: 1267: struct {
[; ;pic12f675.h: 1268: unsigned EEDATA :8;
[; ;pic12f675.h: 1269: };
[; ;pic12f675.h: 1270: } EEDATbits_t;
[; ;pic12f675.h: 1271: extern volatile EEDATbits_t EEDATbits @ 0x09A;
[; ;pic12f675.h: 1280: extern volatile unsigned char EEADR @ 0x09B;
"1282
[; ;pic12f675.h: 1282: asm("EEADR equ 09Bh");
[; <" EEADR equ 09Bh ;# ">
[; ;pic12f675.h: 1285: typedef union {
[; ;pic12f675.h: 1286: struct {
[; ;pic12f675.h: 1287: unsigned EEADR :7;
[; ;pic12f675.h: 1288: };
[; ;pic12f675.h: 1289: } EEADRbits_t;
[; ;pic12f675.h: 1290: extern volatile EEADRbits_t EEADRbits @ 0x09B;
[; ;pic12f675.h: 1299: extern volatile unsigned char EECON1 @ 0x09C;
"1301
[; ;pic12f675.h: 1301: asm("EECON1 equ 09Ch");
[; <" EECON1 equ 09Ch ;# ">
[; ;pic12f675.h: 1304: typedef union {
[; ;pic12f675.h: 1305: struct {
[; ;pic12f675.h: 1306: unsigned RD :1;
[; ;pic12f675.h: 1307: unsigned WR :1;
[; ;pic12f675.h: 1308: unsigned WREN :1;
[; ;pic12f675.h: 1309: unsigned WRERR :1;
[; ;pic12f675.h: 1310: };
[; ;pic12f675.h: 1311: } EECON1bits_t;
[; ;pic12f675.h: 1312: extern volatile EECON1bits_t EECON1bits @ 0x09C;
[; ;pic12f675.h: 1336: extern volatile unsigned char EECON2 @ 0x09D;
"1338
[; ;pic12f675.h: 1338: asm("EECON2 equ 09Dh");
[; <" EECON2 equ 09Dh ;# ">
[; ;pic12f675.h: 1341: typedef union {
[; ;pic12f675.h: 1342: struct {
[; ;pic12f675.h: 1343: unsigned EECON2 :8;
[; ;pic12f675.h: 1344: };
[; ;pic12f675.h: 1345: } EECON2bits_t;
[; ;pic12f675.h: 1346: extern volatile EECON2bits_t EECON2bits @ 0x09D;
[; ;pic12f675.h: 1355: extern volatile unsigned char ADRESL @ 0x09E;
"1357
[; ;pic12f675.h: 1357: asm("ADRESL equ 09Eh");
[; <" ADRESL equ 09Eh ;# ">
[; ;pic12f675.h: 1360: typedef union {
[; ;pic12f675.h: 1361: struct {
[; ;pic12f675.h: 1362: unsigned ADRESL :8;
[; ;pic12f675.h: 1363: };
[; ;pic12f675.h: 1364: } ADRESLbits_t;
[; ;pic12f675.h: 1365: extern volatile ADRESLbits_t ADRESLbits @ 0x09E;
[; ;pic12f675.h: 1374: extern volatile unsigned char ANSEL @ 0x09F;
"1376
[; ;pic12f675.h: 1376: asm("ANSEL equ 09Fh");
[; <" ANSEL equ 09Fh ;# ">
[; ;pic12f675.h: 1379: typedef union {
[; ;pic12f675.h: 1380: struct {
[; ;pic12f675.h: 1381: unsigned ANS :4;
[; ;pic12f675.h: 1382: unsigned ADCS :3;
[; ;pic12f675.h: 1383: };
[; ;pic12f675.h: 1384: struct {
[; ;pic12f675.h: 1385: unsigned ANS0 :1;
[; ;pic12f675.h: 1386: unsigned ANS1 :1;
[; ;pic12f675.h: 1387: unsigned ANS2 :1;
[; ;pic12f675.h: 1388: unsigned ANS3 :1;
[; ;pic12f675.h: 1389: unsigned ADCS0 :1;
[; ;pic12f675.h: 1390: unsigned ADCS1 :1;
[; ;pic12f675.h: 1391: unsigned ADCS2 :1;
[; ;pic12f675.h: 1392: };
[; ;pic12f675.h: 1393: } ANSELbits_t;
[; ;pic12f675.h: 1394: extern volatile ANSELbits_t ANSELbits @ 0x09F;
[; ;pic12f675.h: 1449: extern volatile __bit ADCS0 @ (((unsigned) &ANSEL)*8) + 4;
[; ;pic12f675.h: 1451: extern volatile __bit ADCS1 @ (((unsigned) &ANSEL)*8) + 5;
[; ;pic12f675.h: 1453: extern volatile __bit ADCS2 @ (((unsigned) &ANSEL)*8) + 6;
[; ;pic12f675.h: 1455: extern volatile __bit ADFM @ (((unsigned) &ADCON0)*8) + 7;
[; ;pic12f675.h: 1457: extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;
[; ;pic12f675.h: 1459: extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;
[; ;pic12f675.h: 1461: extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;
[; ;pic12f675.h: 1463: extern volatile __bit ANS0 @ (((unsigned) &ANSEL)*8) + 0;
[; ;pic12f675.h: 1465: extern volatile __bit ANS1 @ (((unsigned) &ANSEL)*8) + 1;
[; ;pic12f675.h: 1467: extern volatile __bit ANS2 @ (((unsigned) &ANSEL)*8) + 2;
[; ;pic12f675.h: 1469: extern volatile __bit ANS3 @ (((unsigned) &ANSEL)*8) + 3;
[; ;pic12f675.h: 1471: extern volatile __bit CAL0 @ (((unsigned) &OSCCAL)*8) + 2;
[; ;pic12f675.h: 1473: extern volatile __bit CAL1 @ (((unsigned) &OSCCAL)*8) + 3;
[; ;pic12f675.h: 1475: extern volatile __bit CAL2 @ (((unsigned) &OSCCAL)*8) + 4;
[; ;pic12f675.h: 1477: extern volatile __bit CAL3 @ (((unsigned) &OSCCAL)*8) + 5;
[; ;pic12f675.h: 1479: extern volatile __bit CAL4 @ (((unsigned) &OSCCAL)*8) + 6;
[; ;pic12f675.h: 1481: extern volatile __bit CAL5 @ (((unsigned) &OSCCAL)*8) + 7;
[; ;pic12f675.h: 1483: extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;
[; ;pic12f675.h: 1485: extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 2;
[; ;pic12f675.h: 1487: extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 3;
[; ;pic12f675.h: 1489: extern volatile __bit CINV @ (((unsigned) &CMCON)*8) + 4;
[; ;pic12f675.h: 1491: extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;
[; ;pic12f675.h: 1493: extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;
[; ;pic12f675.h: 1495: extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;
[; ;pic12f675.h: 1497: extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;
[; ;pic12f675.h: 1499: extern volatile __bit CMIE @ (((unsigned) &PIE1)*8) + 3;
[; ;pic12f675.h: 1501: extern volatile __bit CMIF @ (((unsigned) &PIR1)*8) + 3;
[; ;pic12f675.h: 1503: extern volatile __bit COUT @ (((unsigned) &CMCON)*8) + 6;
[; ;pic12f675.h: 1505: extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;
[; ;pic12f675.h: 1507: extern volatile __bit EEIE @ (((unsigned) &PIE1)*8) + 7;
[; ;pic12f675.h: 1509: extern volatile __bit EEIF @ (((unsigned) &PIR1)*8) + 7;
[; ;pic12f675.h: 1511: extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;
[; ;pic12f675.h: 1513: extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 1;
[; ;pic12f675.h: 1515: extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 1;
[; ;pic12f675.h: 1517: extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 1;
[; ;pic12f675.h: 1519: extern volatile __bit GP0 @ (((unsigned) &GPIO)*8) + 0;
[; ;pic12f675.h: 1521: extern volatile __bit GP1 @ (((unsigned) &GPIO)*8) + 1;
[; ;pic12f675.h: 1523: extern volatile __bit GP2 @ (((unsigned) &GPIO)*8) + 2;
[; ;pic12f675.h: 1525: extern volatile __bit GP3 @ (((unsigned) &GPIO)*8) + 3;
[; ;pic12f675.h: 1527: extern volatile __bit GP4 @ (((unsigned) &GPIO)*8) + 4;
[; ;pic12f675.h: 1529: extern volatile __bit GP5 @ (((unsigned) &GPIO)*8) + 5;
[; ;pic12f675.h: 1531: extern volatile __bit GPIE @ (((unsigned) &INTCON)*8) + 3;
[; ;pic12f675.h: 1533: extern volatile __bit GPIF @ (((unsigned) &INTCON)*8) + 0;
[; ;pic12f675.h: 1535: extern volatile __bit GPIO0 @ (((unsigned) &GPIO)*8) + 0;
[; ;pic12f675.h: 1537: extern volatile __bit GPIO1 @ (((unsigned) &GPIO)*8) + 1;
[; ;pic12f675.h: 1539: extern volatile __bit GPIO2 @ (((unsigned) &GPIO)*8) + 2;
[; ;pic12f675.h: 1541: extern volatile __bit GPIO3 @ (((unsigned) &GPIO)*8) + 3;
[; ;pic12f675.h: 1543: extern volatile __bit GPIO4 @ (((unsigned) &GPIO)*8) + 4;
[; ;pic12f675.h: 1545: extern volatile __bit GPIO5 @ (((unsigned) &GPIO)*8) + 5;
[; ;pic12f675.h: 1547: extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;
[; ;pic12f675.h: 1549: extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;
[; ;pic12f675.h: 1551: extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;
[; ;pic12f675.h: 1553: extern volatile __bit IOC0 @ (((unsigned) &IOC)*8) + 0;
[; ;pic12f675.h: 1555: extern volatile __bit IOC1 @ (((unsigned) &IOC)*8) + 1;
[; ;pic12f675.h: 1557: extern volatile __bit IOC2 @ (((unsigned) &IOC)*8) + 2;
[; ;pic12f675.h: 1559: extern volatile __bit IOC3 @ (((unsigned) &IOC)*8) + 3;
[; ;pic12f675.h: 1561: extern volatile __bit IOC4 @ (((unsigned) &IOC)*8) + 4;
[; ;pic12f675.h: 1563: extern volatile __bit IOC5 @ (((unsigned) &IOC)*8) + 5;
[; ;pic12f675.h: 1565: extern volatile __bit IOCB0 @ (((unsigned) &IOC)*8) + 0;
[; ;pic12f675.h: 1567: extern volatile __bit IOCB1 @ (((unsigned) &IOC)*8) + 1;
[; ;pic12f675.h: 1569: extern volatile __bit IOCB2 @ (((unsigned) &IOC)*8) + 2;
[; ;pic12f675.h: 1571: extern volatile __bit IOCB3 @ (((unsigned) &IOC)*8) + 3;
[; ;pic12f675.h: 1573: extern volatile __bit IOCB4 @ (((unsigned) &IOC)*8) + 4;
[; ;pic12f675.h: 1575: extern volatile __bit IOCB5 @ (((unsigned) &IOC)*8) + 5;
[; ;pic12f675.h: 1577: extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;
[; ;pic12f675.h: 1579: extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;
[; ;pic12f675.h: 1581: extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;
[; ;pic12f675.h: 1583: extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;
[; ;pic12f675.h: 1585: extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;
[; ;pic12f675.h: 1587: extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;
[; ;pic12f675.h: 1589: extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;
[; ;pic12f675.h: 1591: extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;
[; ;pic12f675.h: 1593: extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;
[; ;pic12f675.h: 1595: extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;
[; ;pic12f675.h: 1597: extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;
[; ;pic12f675.h: 1599: extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;
[; ;pic12f675.h: 1601: extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;
[; ;pic12f675.h: 1603: extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;
[; ;pic12f675.h: 1605: extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;
[; ;pic12f675.h: 1607: extern volatile __bit T1IE @ (((unsigned) &PIE1)*8) + 0;
[; ;pic12f675.h: 1609: extern volatile __bit T1IF @ (((unsigned) &PIR1)*8) + 0;
[; ;pic12f675.h: 1611: extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;
[; ;pic12f675.h: 1613: extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;
[; ;pic12f675.h: 1615: extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;
[; ;pic12f675.h: 1617: extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;
[; ;pic12f675.h: 1619: extern volatile __bit TMR1GE @ (((unsigned) &T1CON)*8) + 6;
[; ;pic12f675.h: 1621: extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;
[; ;pic12f675.h: 1623: extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;
[; ;pic12f675.h: 1625: extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;
[; ;pic12f675.h: 1627: extern volatile __bit TRISIO0 @ (((unsigned) &TRISIO)*8) + 0;
[; ;pic12f675.h: 1629: extern volatile __bit TRISIO1 @ (((unsigned) &TRISIO)*8) + 1;
[; ;pic12f675.h: 1631: extern volatile __bit TRISIO2 @ (((unsigned) &TRISIO)*8) + 2;
[; ;pic12f675.h: 1633: extern volatile __bit TRISIO3 @ (((unsigned) &TRISIO)*8) + 3;
[; ;pic12f675.h: 1635: extern volatile __bit TRISIO4 @ (((unsigned) &TRISIO)*8) + 4;
[; ;pic12f675.h: 1637: extern volatile __bit TRISIO5 @ (((unsigned) &TRISIO)*8) + 5;
[; ;pic12f675.h: 1639: extern volatile __bit VCFG @ (((unsigned) &ADCON0)*8) + 6;
[; ;pic12f675.h: 1641: extern volatile __bit VR0 @ (((unsigned) &VRCON)*8) + 0;
[; ;pic12f675.h: 1643: extern volatile __bit VR1 @ (((unsigned) &VRCON)*8) + 1;
[; ;pic12f675.h: 1645: extern volatile __bit VR2 @ (((unsigned) &VRCON)*8) + 2;
[; ;pic12f675.h: 1647: extern volatile __bit VR3 @ (((unsigned) &VRCON)*8) + 3;
[; ;pic12f675.h: 1649: extern volatile __bit VREN @ (((unsigned) &VRCON)*8) + 7;
[; ;pic12f675.h: 1651: extern volatile __bit VRR @ (((unsigned) &VRCON)*8) + 5;
[; ;pic12f675.h: 1653: extern volatile __bit WPU0 @ (((unsigned) &WPU)*8) + 0;
[; ;pic12f675.h: 1655: extern volatile __bit WPU1 @ (((unsigned) &WPU)*8) + 1;
[; ;pic12f675.h: 1657: extern volatile __bit WPU2 @ (((unsigned) &WPU)*8) + 2;
[; ;pic12f675.h: 1659: extern volatile __bit WPU4 @ (((unsigned) &WPU)*8) + 4;
[; ;pic12f675.h: 1661: extern volatile __bit WPU5 @ (((unsigned) &WPU)*8) + 5;
[; ;pic12f675.h: 1663: extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;
[; ;pic12f675.h: 1665: extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;
[; ;pic12f675.h: 1667: extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;
[; ;pic12f675.h: 1669: extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;
[; ;pic12f675.h: 1671: extern volatile __bit nBOD @ (((unsigned) &PCON)*8) + 0;
[; ;pic12f675.h: 1673: extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;
[; ;pic12f675.h: 1675: extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 1;
[; ;pic12f675.h: 1677: extern volatile __bit nGPPU @ (((unsigned) &OPTION_REG)*8) + 7;
[; ;pic12f675.h: 1679: extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;
[; ;pic12f675.h: 1681: extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;
[; ;pic12f675.h: 1683: extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;
[; ;pic12f675.h: 1685: extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;
[; ;pic.h: 28: extern void __nop(void);
[; ;pic.h: 77: extern unsigned int flash_read(unsigned short addr);
[; ;pic.h: 141: extern void flash_erase(unsigned short addr);
[; ;eeprom_routines.h: 114: extern void eeprom_write(unsigned char addr, unsigned char value);
[; ;eeprom_routines.h: 115: extern unsigned char eeprom_read(unsigned char addr);
[; ;eeprom_routines.h: 116: extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
[; ;eeprom_routines.h: 117: extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);
[; ;pic.h: 152: extern __nonreentrant void _delay(unsigned long);
[; ;pic.h: 186: extern unsigned char __resetbits;
[; ;pic.h: 187: extern __bit __powerdown;
[; ;pic.h: 188: extern __bit __timeout;
"61 main.c
[v _delay_val `us ~T0 @X0 1 e ]
[; ;main.c: 61: unsigned short delay_val;
[; ;main.c: 87: void forwardBackStepByStep(unsigned char flage);
[; ;main.c: 88: void forwardBackStepByStepReverse(unsigned char flage);
[; ;main.c: 89: void togaleLeds(unsigned char flage , unsigned char fristTogaleOrNo );
[; ;main.c: 90: void forwardBackwordLightOneOnly();
[; ;main.c: 91: void forwardBackwordLightOneByOne();
[; ;main.c: 92: void forwardBackwordLightOneOnlyAndRevese(unsigned char );
[; ;main.c: 94: void togale_lightTwoByTwo();
[; ;main.c: 95: void my_delay_ms(unsigned short n);
[; ;main.c: 106: void InitADC(unsigned char);
[; ;main.c: 107: unsigned int GetADCValue(unsigned char);
[; ;main.c: 111: void gpio_init();
"116
[v _main `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 116: void main(void) {
[e :U _main ]
[f ]
[; ;main.c: 117: gpio_init();
"117
[e ( _gpio_init ..  ]
[; ;main.c: 118: InitADC(1<<0);
"118
[e ( _InitADC (1 -> << -> 1 `i -> 0 `i `uc ]
[; ;main.c: 119: while(1){
"119
[e :U 84 ]
{
[; ;main.c: 120: forwardBackwordLightOneOnlyAndRevese(1);
"120
[e ( _forwardBackwordLightOneOnlyAndRevese (1 -> -> 1 `i `uc ]
[; ;main.c: 121: forwardBackwordLightOneOnlyAndRevese(0);
"121
[e ( _forwardBackwordLightOneOnlyAndRevese (1 -> -> 0 `i `uc ]
[; ;main.c: 122: forwardBackStepByStep(0);
"122
[e ( _forwardBackStepByStep (1 -> -> 0 `i `uc ]
[; ;main.c: 123: forwardBackStepByStep(1);
"123
[e ( _forwardBackStepByStep (1 -> -> 1 `i `uc ]
[; ;main.c: 124: forwardBackStepByStepReverse(0);
"124
[e ( _forwardBackStepByStepReverse (1 -> -> 0 `i `uc ]
[; ;main.c: 125: forwardBackStepByStepReverse(1);
"125
[e ( _forwardBackStepByStepReverse (1 -> -> 1 `i `uc ]
[; ;main.c: 126: togaleLeds(1 , 0);
"126
[e ( _togaleLeds (2 , -> -> 1 `i `uc -> -> 0 `i `uc ]
[; ;main.c: 127: togaleLeds(1 , 4);
"127
[e ( _togaleLeds (2 , -> -> 1 `i `uc -> -> 4 `i `uc ]
[; ;main.c: 128: togaleLeds(2 , 3);
"128
[e ( _togaleLeds (2 , -> -> 2 `i `uc -> -> 3 `i `uc ]
[; ;main.c: 129: togaleLeds(2 , 4);
"129
[e ( _togaleLeds (2 , -> -> 2 `i `uc -> -> 4 `i `uc ]
"133
}
[e :U 83 ]
"119
[e $U 84  ]
[e :U 85 ]
[; ;main.c: 133: }
[; ;main.c: 135: return;
"135
[e $UE 82  ]
[; ;main.c: 136: }
"136
[e :UE 82 ]
}
"143
[v _gpio_init `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 143: void gpio_init(){
[e :U _gpio_init ]
[f ]
[; ;main.c: 144: ANSEL = 0x00;
"144
[e = _ANSEL -> -> 0 `i `uc ]
[; ;main.c: 145: ADCON0 = 0x00;
"145
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 146: CMCON = 0x07;
"146
[e = _CMCON -> -> 7 `i `uc ]
[; ;main.c: 147: VRCON = 0x00;
"147
[e = _VRCON -> -> 0 `i `uc ]
[; ;main.c: 148: TRISIO = 0x00;
"148
[e = _TRISIO -> -> 0 `i `uc ]
[; ;main.c: 149: GPIO = 0x00;
"149
[e = _GPIO -> -> 0 `i `uc ]
[; ;main.c: 152: TRISIO |=(1<<3);;
"152
[e =| _TRISIO -> << -> 1 `i -> 3 `i `uc ]
[; ;main.c: 153: TRISIO |=(1<<0);;
"153
[e =| _TRISIO -> << -> 1 `i -> 0 `i `uc ]
[; ;main.c: 154: TRISIO &=~(1<<5);;
"154
[e =& _TRISIO -> ~ << -> 1 `i -> 5 `i `uc ]
[; ;main.c: 155: TRISIO &=~(1<<4);;
"155
[e =& _TRISIO -> ~ << -> 1 `i -> 4 `i `uc ]
[; ;main.c: 156: TRISIO &=~(1<<2);;
"156
[e =& _TRISIO -> ~ << -> 1 `i -> 2 `i `uc ]
[; ;main.c: 157: TRISIO &=~(1<<1);;
"157
[e =& _TRISIO -> ~ << -> 1 `i -> 1 `i `uc ]
[; ;main.c: 159: }
"159
[e :UE 86 ]
}
"166
[v _InitADC `(v ~T0 @X0 1 ef1`uc ]
"167
{
[; ;main.c: 166: void InitADC(unsigned char Channel)
[; ;main.c: 167: {
[e :U _InitADC ]
"166
[v _Channel `uc ~T0 @X0 1 r1 ]
"167
[f ]
[; ;main.c: 168: ANSEL = 0x10;
"168
[e = _ANSEL -> -> 16 `i `uc ]
[; ;main.c: 169: ANSEL |= Channel;
"169
[e =| _ANSEL _Channel ]
[; ;main.c: 171: TRISIO |= Channel;
"171
[e =| _TRISIO _Channel ]
[; ;main.c: 172: ADCON0 = 0x81;
"172
[e = _ADCON0 -> -> 129 `i `uc ]
[; ;main.c: 173: CMCON = 0x07;
"173
[e = _CMCON -> -> 7 `i `uc ]
[; ;main.c: 174: VRCON = 0x00;
"174
[e = _VRCON -> -> 0 `i `uc ]
[; ;main.c: 175: }
"175
[e :UE 87 ]
}
"187
[v _GetADCValue `(ui ~T0 @X0 1 ef1`uc ]
"188
{
[; ;main.c: 187: unsigned int GetADCValue(unsigned char Channel)
[; ;main.c: 188: {
[e :U _GetADCValue ]
"187
[v _Channel `uc ~T0 @X0 1 r1 ]
"188
[f ]
[; ;main.c: 189: ADCON0 &= 0xf3;
"189
[e =& _ADCON0 -> -> 243 `i `uc ]
[; ;main.c: 191: switch(Channel)
"191
[e $U 90  ]
[; ;main.c: 192: {
"192
{
[; ;main.c: 193: case 1<<0: ADCON0 |= 0x00; break;
"193
[e :U 91 ]
[e =| _ADCON0 -> -> 0 `i `uc ]
[e $U 89  ]
[; ;main.c: 194: case 1<<1: ADCON0 |= 0x04; break;
"194
[e :U 92 ]
[e =| _ADCON0 -> -> 4 `i `uc ]
[e $U 89  ]
[; ;main.c: 195: case 1<<2: ADCON0 |= 0x08; break;
"195
[e :U 93 ]
[e =| _ADCON0 -> -> 8 `i `uc ]
[e $U 89  ]
[; ;main.c: 196: case 1<<3: ADCON0 |= 0x0c; break;
"196
[e :U 94 ]
[e =| _ADCON0 -> -> 12 `i `uc ]
[e $U 89  ]
[; ;main.c: 198: default: return 0;
"198
[e :U 95 ]
[e ) -> -> 0 `i `ui ]
[e $UE 88  ]
"199
}
[; ;main.c: 199: }
[e $U 89  ]
"191
[e :U 90 ]
[e [\ _Channel , $ -> << -> 1 `i -> 0 `i `uc 91
 , $ -> << -> 1 `i -> 1 `i `uc 92
 , $ -> << -> 1 `i -> 2 `i `uc 93
 , $ -> << -> 1 `i -> 3 `i `uc 94
 95 ]
"199
[e :U 89 ]
[; ;main.c: 201: _delay((unsigned long)((10)*(4000000/4000.0)));
"201
[e ( __delay (1 -> * -> -> 10 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
[; ;main.c: 203: GO_nDONE = 1;
"203
[e = _GO_nDONE -> -> 1 `i `b ]
[; ;main.c: 205: while(GO_nDONE);
"205
[e $U 96  ]
[e :U 97 ]
[e :U 96 ]
[e $ _GO_nDONE 97  ]
[e :U 98 ]
[; ;main.c: 207: return ((ADRESH<<8)+ADRESL);
"207
[e ) -> + << -> _ADRESH `i -> 8 `i -> _ADRESL `i `ui ]
[e $UE 88  ]
[; ;main.c: 208: }
"208
[e :UE 88 ]
}
"217
[v _my_delay_ms `(v ~T0 @X0 1 ef1`us ]
{
[; ;main.c: 217: void my_delay_ms(unsigned short n) {
[e :U _my_delay_ms ]
[v _n `us ~T0 @X0 1 r1 ]
[f ]
[; ;main.c: 218: while(n--) {
"218
[e $U 100  ]
[e :U 101 ]
{
[; ;main.c: 219: _delay((unsigned long)((1)*(4000000/4000.0)));
"219
[e ( __delay (1 -> * -> -> 1 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
"220
}
[e :U 100 ]
"218
[e $ != -> -- _n -> -> 1 `i `us `ui -> -> -> 0 `i `us `ui 101  ]
[e :U 102 ]
[; ;main.c: 220: }
[; ;main.c: 221: }
"221
[e :UE 99 ]
}
"225
[v _forwardBackStepByStep `(v ~T0 @X0 1 ef1`uc ]
{
[; ;main.c: 225: void forwardBackStepByStep(unsigned char flage){
[e :U _forwardBackStepByStep ]
[v _flage `uc ~T0 @X0 1 r1 ]
[f ]
"226
[v _count `uc ~T0 @X0 1 a ]
[; ;main.c: 226: unsigned char count=5;
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 227: while(count--){
"227
[e $U 104  ]
[e :U 105 ]
{
[; ;main.c: 228: for(unsigned char i =5 ; i>0 ;i--){
"228
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 5 `i `uc ]
[e $ > -> _i `i -> 0 `i 107  ]
[e $U 108  ]
[e :U 107 ]
{
[; ;main.c: 229: if(i ==3)
"229
[e $ ! == -> _i `i -> 3 `i 110  ]
[; ;main.c: 230: i=2;
"230
[e = _i -> -> 2 `i `uc ]
[e :U 110 ]
[; ;main.c: 231: switch(flage){
"231
[e $U 112  ]
{
[; ;main.c: 232: case 0: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i); break;
"232
[e :U 113 ]
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
[e $U 111  ]
[; ;main.c: 233: case 1 : GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO &=~(1<<i); break;
"233
[e :U 114 ]
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =& _GPIO -> ~ << -> 1 `i _i `uc ]
[e $U 111  ]
"234
}
[; ;main.c: 234: }
[e $U 111  ]
"231
[e :U 112 ]
[e [\ _flage , $ -> -> 0 `i `uc 113
 , $ -> -> 1 `i `uc 114
 111 ]
"234
[e :U 111 ]
[; ;main.c: 236: while(!(GPIO & (1<< 3))){
"236
[e $U 115  ]
[e :U 116 ]
{
[; ;main.c: 237: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"237
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"238
}
[e :U 115 ]
"236
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 116  ]
[e :U 117 ]
[; ;main.c: 238: }
[; ;main.c: 240: delay_val=GetADCValue(1<<0);
"240
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 241: my_delay_ms(delay_val);
"241
[e ( _my_delay_ms (1 _delay_val ]
"243
}
"228
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 107  ]
[e :U 108 ]
"243
}
[; ;main.c: 243: }
[; ;main.c: 244: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"244
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"246
}
[e :U 104 ]
"227
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 105  ]
[e :U 106 ]
[; ;main.c: 246: }
[; ;main.c: 247: count=5;
"247
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 248: while(count--){
"248
[e $U 118  ]
[e :U 119 ]
{
[; ;main.c: 249: for(unsigned char i =1 ; i<6 ;i++){
"249
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 121  ]
[e $U 122  ]
[e :U 121 ]
{
[; ;main.c: 250: if(i ==3)
"250
[e $ ! == -> _i `i -> 3 `i 124  ]
[; ;main.c: 251: i=4;
"251
[e = _i -> -> 4 `i `uc ]
[e :U 124 ]
[; ;main.c: 252: switch(flage){
"252
[e $U 126  ]
{
[; ;main.c: 253: case 0: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i); break;
"253
[e :U 127 ]
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
[e $U 125  ]
[; ;main.c: 254: case 1 : GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO &=~(1<<i); break;
"254
[e :U 128 ]
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =& _GPIO -> ~ << -> 1 `i _i `uc ]
[e $U 125  ]
"255
}
[; ;main.c: 255: }
[e $U 125  ]
"252
[e :U 126 ]
[e [\ _flage , $ -> -> 0 `i `uc 127
 , $ -> -> 1 `i `uc 128
 125 ]
"255
[e :U 125 ]
[; ;main.c: 257: while(!(GPIO & (1<< 3))){
"257
[e $U 129  ]
[e :U 130 ]
{
[; ;main.c: 258: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"258
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"259
}
[e :U 129 ]
"257
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 130  ]
[e :U 131 ]
[; ;main.c: 259: }
[; ;main.c: 261: delay_val=GetADCValue(1<<0);
"261
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 262: my_delay_ms(delay_val);
"262
[e ( _my_delay_ms (1 _delay_val ]
"264
}
"249
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 121  ]
[e :U 122 ]
"264
}
[; ;main.c: 264: }
[; ;main.c: 265: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"265
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"267
}
[e :U 118 ]
"248
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 119  ]
[e :U 120 ]
[; ;main.c: 267: }
[; ;main.c: 268: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"268
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[; ;main.c: 269: }
"269
[e :UE 103 ]
}
"271
[v _forwardBackStepByStepReverse `(v ~T0 @X0 1 ef1`uc ]
{
[; ;main.c: 271: void forwardBackStepByStepReverse(unsigned char flage){
[e :U _forwardBackStepByStepReverse ]
[v _flage `uc ~T0 @X0 1 r1 ]
[f ]
"272
[v _count `uc ~T0 @X0 1 a ]
[; ;main.c: 272: unsigned char count=5;
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 273: while(count--){
"273
[e $U 133  ]
[e :U 134 ]
{
[; ;main.c: 274: for(unsigned char i =5 ; i>0 ;i--){
"274
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 5 `i `uc ]
[e $ > -> _i `i -> 0 `i 136  ]
[e $U 137  ]
[e :U 136 ]
{
[; ;main.c: 275: if(i ==3)
"275
[e $ ! == -> _i `i -> 3 `i 139  ]
[; ;main.c: 276: i=2;
"276
[e = _i -> -> 2 `i `uc ]
[e :U 139 ]
[; ;main.c: 277: switch(flage){
"277
[e $U 141  ]
{
[; ;main.c: 278: case 0: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i); break;
"278
[e :U 142 ]
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
[e $U 140  ]
[; ;main.c: 279: case 1 : GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO &=~(1<<i); break;
"279
[e :U 143 ]
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =& _GPIO -> ~ << -> 1 `i _i `uc ]
[e $U 140  ]
"280
}
[; ;main.c: 280: }
[e $U 140  ]
"277
[e :U 141 ]
[e [\ _flage , $ -> -> 0 `i `uc 142
 , $ -> -> 1 `i `uc 143
 140 ]
"280
[e :U 140 ]
[; ;main.c: 282: while(!(GPIO & (1<< 3))){
"282
[e $U 144  ]
[e :U 145 ]
{
[; ;main.c: 283: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"283
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"284
}
[e :U 144 ]
"282
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 145  ]
[e :U 146 ]
[; ;main.c: 284: }
[; ;main.c: 286: delay_val=GetADCValue(1<<0);
"286
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 287: my_delay_ms(delay_val);
"287
[e ( _my_delay_ms (1 _delay_val ]
"289
}
"274
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 136  ]
[e :U 137 ]
"289
}
[; ;main.c: 289: }
[; ;main.c: 292: for(unsigned char i =1 ; i<6 ;i++){
"292
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 147  ]
[e $U 148  ]
[e :U 147 ]
{
[; ;main.c: 293: if(i ==3)
"293
[e $ ! == -> _i `i -> 3 `i 150  ]
[; ;main.c: 294: i=4;
"294
[e = _i -> -> 4 `i `uc ]
[e :U 150 ]
[; ;main.c: 295: switch(flage){
"295
[e $U 152  ]
{
[; ;main.c: 296: case 0: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i); break;
"296
[e :U 153 ]
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
[e $U 151  ]
[; ;main.c: 297: case 1 : GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO &=~(1<<i); break;
"297
[e :U 154 ]
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =& _GPIO -> ~ << -> 1 `i _i `uc ]
[e $U 151  ]
"298
}
[; ;main.c: 298: }
[e $U 151  ]
"295
[e :U 152 ]
[e [\ _flage , $ -> -> 0 `i `uc 153
 , $ -> -> 1 `i `uc 154
 151 ]
"298
[e :U 151 ]
[; ;main.c: 300: while(!(GPIO & (1<< 3))){
"300
[e $U 155  ]
[e :U 156 ]
{
[; ;main.c: 301: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"301
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"302
}
[e :U 155 ]
"300
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 156  ]
[e :U 157 ]
[; ;main.c: 302: }
[; ;main.c: 304: delay_val=GetADCValue(1<<0);
"304
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 305: my_delay_ms(delay_val);
"305
[e ( _my_delay_ms (1 _delay_val ]
"307
}
"292
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 147  ]
[e :U 148 ]
"307
}
"310
}
[e :U 133 ]
"273
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 134  ]
[e :U 135 ]
[; ;main.c: 307: }
[; ;main.c: 310: }
[; ;main.c: 311: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"311
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[; ;main.c: 313: }
"313
[e :UE 132 ]
}
"314
[v _togaleLeds `(v ~T0 @X0 1 ef2`uc`uc ]
{
[; ;main.c: 314: void togaleLeds(unsigned char flage , unsigned char fristTogaleOrNo ){
[e :U _togaleLeds ]
[v _flage `uc ~T0 @X0 1 r1 ]
[v _fristTogaleOrNo `uc ~T0 @X0 1 r2 ]
[f ]
"315
[v _count `uc ~T0 @X0 1 a ]
[; ;main.c: 315: unsigned char count=5;
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 316: switch(fristTogaleOrNo){
"316
[e $U 160  ]
{
[; ;main.c: 317: case 0 : GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1)) ; break;
"317
[e :U 161 ]
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e $U 159  ]
[; ;main.c: 318: case 1 : GPIO ^=(1<<5); break;
"318
[e :U 162 ]
[e =^ _GPIO -> << -> 1 `i -> 5 `i `uc ]
[e $U 159  ]
[; ;main.c: 319: case 2 : GPIO ^=(1<<4); break;
"319
[e :U 163 ]
[e =^ _GPIO -> << -> 1 `i -> 4 `i `uc ]
[e $U 159  ]
[; ;main.c: 320: case 3 : GPIO ^=((1<<5)|(1<<4)); break;
"320
[e :U 164 ]
[e =^ _GPIO -> | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i `uc ]
[e $U 159  ]
[; ;main.c: 321: case 4 : GPIO ^=((1<<5)|(1<<1)); break;
"321
[e :U 165 ]
[e =^ _GPIO -> | << -> 1 `i -> 5 `i << -> 1 `i -> 1 `i `uc ]
[e $U 159  ]
"322
}
[; ;main.c: 322: }
[e $U 159  ]
"316
[e :U 160 ]
[e [\ _fristTogaleOrNo , $ -> -> 0 `i `uc 161
 , $ -> -> 1 `i `uc 162
 , $ -> -> 2 `i `uc 163
 , $ -> -> 3 `i `uc 164
 , $ -> -> 4 `i `uc 165
 159 ]
"322
[e :U 159 ]
[; ;main.c: 323: while(count--){
"323
[e $U 166  ]
[e :U 167 ]
{
[; ;main.c: 324: for(unsigned char i =5 ; i>0 ;i--){
"324
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 5 `i `uc ]
[e $ > -> _i `i -> 0 `i 169  ]
[e $U 170  ]
[e :U 169 ]
{
[; ;main.c: 325: if(i ==3)
"325
[e $ ! == -> _i `i -> 3 `i 172  ]
[; ;main.c: 326: i=2;
"326
[e = _i -> -> 2 `i `uc ]
[e :U 172 ]
[; ;main.c: 327: switch(flage){
"327
[e $U 174  ]
{
[; ;main.c: 328: case 1 : GPIO ^=(1<<i); break;
"328
[e :U 175 ]
[e =^ _GPIO -> << -> 1 `i _i `uc ]
[e $U 173  ]
[; ;main.c: 329: case 2 : GPIO ^=((1<<5)|(1<<4)) ; GPIO ^=((1<<2)|(1<<1)); break;
"329
[e :U 176 ]
[e =^ _GPIO -> | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i `uc ]
[e =^ _GPIO -> | << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e $U 173  ]
[; ;main.c: 330: case 4 : GPIO ^=((1<<5)|(1<<4)|(1<<2)|(1<<1)); break;
"330
[e :U 177 ]
[e =^ _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e $U 173  ]
"331
}
[; ;main.c: 331: }
[e $U 173  ]
"327
[e :U 174 ]
[e [\ _flage , $ -> -> 1 `i `uc 175
 , $ -> -> 2 `i `uc 176
 , $ -> -> 4 `i `uc 177
 173 ]
"331
[e :U 173 ]
[; ;main.c: 333: while(!(GPIO & (1<< 3))){
"333
[e $U 178  ]
[e :U 179 ]
{
[; ;main.c: 334: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"334
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"335
}
[e :U 178 ]
"333
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 179  ]
[e :U 180 ]
[; ;main.c: 335: }
[; ;main.c: 337: delay_val=GetADCValue(1<<0);
"337
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 338: my_delay_ms(delay_val);
"338
[e ( _my_delay_ms (1 _delay_val ]
"340
}
"324
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 169  ]
[e :U 170 ]
"340
}
"343
}
[e :U 166 ]
"323
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 167  ]
[e :U 168 ]
[; ;main.c: 340: }
[; ;main.c: 343: }
[; ;main.c: 344: count=5;
"344
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 352: while(count--){
"352
[e $U 181  ]
[e :U 182 ]
{
[; ;main.c: 353: for(unsigned char i =1 ; i<6 ;i++){
"353
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 184  ]
[e $U 185  ]
[e :U 184 ]
{
[; ;main.c: 354: if(i ==3)
"354
[e $ ! == -> _i `i -> 3 `i 187  ]
[; ;main.c: 355: i=4;
"355
[e = _i -> -> 4 `i `uc ]
[e :U 187 ]
[; ;main.c: 356: switch(flage){
"356
[e $U 189  ]
{
[; ;main.c: 357: case 1 : GPIO ^=(1<<i); break;
"357
[e :U 190 ]
[e =^ _GPIO -> << -> 1 `i _i `uc ]
[e $U 188  ]
[; ;main.c: 358: case 2 : GPIO ^=((1<<5)|(1<<4)) ; GPIO ^=((1<<2)|(1<<1)); break;
"358
[e :U 191 ]
[e =^ _GPIO -> | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i `uc ]
[e =^ _GPIO -> | << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e $U 188  ]
[; ;main.c: 359: case 4 : GPIO ^=((1<<5)|(1<<4)|(1<<2)|(1<<1)); break;
"359
[e :U 192 ]
[e =^ _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e $U 188  ]
"361
}
[; ;main.c: 361: }
[e $U 188  ]
"356
[e :U 189 ]
[e [\ _flage , $ -> -> 1 `i `uc 190
 , $ -> -> 2 `i `uc 191
 , $ -> -> 4 `i `uc 192
 188 ]
"361
[e :U 188 ]
[; ;main.c: 363: while(!(GPIO & (1<< 3))){
"363
[e $U 193  ]
[e :U 194 ]
{
[; ;main.c: 364: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"364
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"365
}
[e :U 193 ]
"363
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 194  ]
[e :U 195 ]
[; ;main.c: 365: }
[; ;main.c: 367: delay_val=GetADCValue(1<<0);
"367
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 368: my_delay_ms(delay_val);
"368
[e ( _my_delay_ms (1 _delay_val ]
"370
}
"353
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 184  ]
[e :U 185 ]
"370
}
"373
}
[e :U 181 ]
"352
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 182  ]
[e :U 183 ]
[; ;main.c: 370: }
[; ;main.c: 373: }
[; ;main.c: 374: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"374
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[; ;main.c: 376: }
"376
[e :UE 158 ]
}
"378
[v _forwardBackwordLightOneOnly `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 378: void forwardBackwordLightOneOnly(){
[e :U _forwardBackwordLightOneOnly ]
[f ]
"379
[v _count `uc ~T0 @X0 1 a ]
[; ;main.c: 379: unsigned char count=5;
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 380: while(count--){
"380
[e $U 197  ]
[e :U 198 ]
{
[; ;main.c: 381: for(unsigned char i =5 ; i>0 ;i--){
"381
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 5 `i `uc ]
[e $ > -> _i `i -> 0 `i 200  ]
[e $U 201  ]
[e :U 200 ]
{
[; ;main.c: 382: if(i ==3)
"382
[e $ ! == -> _i `i -> 3 `i 203  ]
[; ;main.c: 383: i=2;
"383
[e = _i -> -> 2 `i `uc ]
[e :U 203 ]
[; ;main.c: 384: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i);
"384
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
[; ;main.c: 387: while(!(GPIO & (1<< 3))){
"387
[e $U 204  ]
[e :U 205 ]
{
[; ;main.c: 388: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"388
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"389
}
[e :U 204 ]
"387
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 205  ]
[e :U 206 ]
[; ;main.c: 389: }
[; ;main.c: 391: delay_val=GetADCValue(1<<0);
"391
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 392: my_delay_ms(delay_val);
"392
[e ( _my_delay_ms (1 _delay_val ]
"394
}
"381
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 200  ]
[e :U 201 ]
"394
}
"396
}
[e :U 197 ]
"380
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 198  ]
[e :U 199 ]
[; ;main.c: 394: }
[; ;main.c: 396: }
[; ;main.c: 397: count=5;
"397
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 398: while(count--){
"398
[e $U 207  ]
[e :U 208 ]
{
[; ;main.c: 399: for(unsigned char i =1 ; i<6 ;i++){
"399
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 210  ]
[e $U 211  ]
[e :U 210 ]
{
[; ;main.c: 400: if(i ==3)
"400
[e $ ! == -> _i `i -> 3 `i 213  ]
[; ;main.c: 401: i=4;
"401
[e = _i -> -> 4 `i `uc ]
[e :U 213 ]
[; ;main.c: 402: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i);
"402
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
[; ;main.c: 404: delay_val=GetADCValue(1<<0);
"404
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 405: my_delay_ms(delay_val);
"405
[e ( _my_delay_ms (1 _delay_val ]
"407
}
"399
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 210  ]
[e :U 211 ]
"407
}
"409
}
[e :U 207 ]
"398
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 208  ]
[e :U 209 ]
[; ;main.c: 407: }
[; ;main.c: 409: }
[; ;main.c: 410: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"410
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[; ;main.c: 411: }
"411
[e :UE 196 ]
}
"413
[v _forwardBackwordLightOneByOne `(v ~T0 @X0 1 ef ]
{
[; ;main.c: 413: void forwardBackwordLightOneByOne(){
[e :U _forwardBackwordLightOneByOne ]
[f ]
"414
[v _count `uc ~T0 @X0 1 a ]
[; ;main.c: 414: unsigned char count=5;
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 415: while(count--){
"415
[e $U 215  ]
[e :U 216 ]
{
[; ;main.c: 416: for(unsigned char i =5 ; i>0 ;i--){
"416
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 5 `i `uc ]
[e $ > -> _i `i -> 0 `i 218  ]
[e $U 219  ]
[e :U 218 ]
{
[; ;main.c: 417: if(i ==3)
"417
[e $ ! == -> _i `i -> 3 `i 221  ]
[; ;main.c: 418: i=2;
"418
[e = _i -> -> 2 `i `uc ]
[e :U 221 ]
[; ;main.c: 419: GPIO |=(1<<i);
"419
[e =| _GPIO -> << -> 1 `i _i `uc ]
[; ;main.c: 422: while(!(GPIO & (1<< 3))){
"422
[e $U 222  ]
[e :U 223 ]
{
[; ;main.c: 423: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"423
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"424
}
[e :U 222 ]
"422
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 223  ]
[e :U 224 ]
[; ;main.c: 424: }
[; ;main.c: 426: delay_val=GetADCValue(1<<0);
"426
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 427: my_delay_ms(delay_val);
"427
[e ( _my_delay_ms (1 _delay_val ]
"429
}
"416
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 218  ]
[e :U 219 ]
"429
}
[; ;main.c: 429: }
[; ;main.c: 430: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"430
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"432
}
[e :U 215 ]
"415
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 216  ]
[e :U 217 ]
[; ;main.c: 432: }
[; ;main.c: 433: count=5;
"433
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 434: while(count--){
"434
[e $U 225  ]
[e :U 226 ]
{
[; ;main.c: 435: for(unsigned char i =1 ; i<6 ;i++){
"435
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 228  ]
[e $U 229  ]
[e :U 228 ]
{
[; ;main.c: 436: if(i ==3)
"436
[e $ ! == -> _i `i -> 3 `i 231  ]
[; ;main.c: 437: i=4;
"437
[e = _i -> -> 4 `i `uc ]
[e :U 231 ]
[; ;main.c: 438: GPIO |=(1<<i);
"438
[e =| _GPIO -> << -> 1 `i _i `uc ]
[; ;main.c: 440: while(!(GPIO & (1<< 3))){
"440
[e $U 232  ]
[e :U 233 ]
{
[; ;main.c: 441: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"441
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"442
}
[e :U 232 ]
"440
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 233  ]
[e :U 234 ]
[; ;main.c: 442: }
[; ;main.c: 445: delay_val=GetADCValue(1<<0);
"445
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 446: my_delay_ms(delay_val);
"446
[e ( _my_delay_ms (1 _delay_val ]
"448
}
"435
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 228  ]
[e :U 229 ]
"448
}
[; ;main.c: 448: }
[; ;main.c: 449: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"449
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"451
}
[e :U 225 ]
"434
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 226  ]
[e :U 227 ]
[; ;main.c: 451: }
[; ;main.c: 452: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"452
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[; ;main.c: 453: }
"453
[e :UE 214 ]
}
"454
[v _forwardBackwordLightOneOnlyAndRevese `(v ~T0 @X0 1 ef1`uc ]
{
[; ;main.c: 454: void forwardBackwordLightOneOnlyAndRevese(unsigned char flage){
[e :U _forwardBackwordLightOneOnlyAndRevese ]
[v _flage `uc ~T0 @X0 1 r1 ]
[f ]
"455
[v _count `uc ~T0 @X0 1 a ]
[; ;main.c: 455: unsigned char count=5;
[e = _count -> -> 5 `i `uc ]
[; ;main.c: 456: while(count--){
"456
[e $U 236  ]
[e :U 237 ]
{
[; ;main.c: 457: for(unsigned char i =5 ; i>0 ;i--){
"457
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 5 `i `uc ]
[e $ > -> _i `i -> 0 `i 239  ]
[e $U 240  ]
[e :U 239 ]
{
[; ;main.c: 458: if(i ==3)
"458
[e $ ! == -> _i `i -> 3 `i 242  ]
[; ;main.c: 459: i=2;
"459
[e = _i -> -> 2 `i `uc ]
[e :U 242 ]
[; ;main.c: 460: if(flage){
"460
[e $ ! != -> _flage `i -> -> -> 0 `i `uc `i 243  ]
{
[; ;main.c: 461: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i);
"461
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
"462
}
[; ;main.c: 462: }else{
[e $U 244  ]
[e :U 243 ]
{
[; ;main.c: 463: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO &=~(1<<i);
"463
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =& _GPIO -> ~ << -> 1 `i _i `uc ]
"464
}
[e :U 244 ]
[; ;main.c: 464: }
[; ;main.c: 466: while(!(GPIO & (1<< 3))){
"466
[e $U 245  ]
[e :U 246 ]
{
[; ;main.c: 467: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"467
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"468
}
[e :U 245 ]
"466
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 246  ]
[e :U 247 ]
[; ;main.c: 468: }
[; ;main.c: 471: delay_val=GetADCValue(1<<0);
"471
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 472: my_delay_ms(delay_val);
"472
[e ( _my_delay_ms (1 _delay_val ]
"474
}
"457
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 239  ]
[e :U 240 ]
"474
}
[; ;main.c: 474: }
[; ;main.c: 477: for(unsigned char i =1 ; i<6 ;i++){
"477
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 248  ]
[e $U 249  ]
[e :U 248 ]
{
[; ;main.c: 478: if(i ==3)
"478
[e $ ! == -> _i `i -> 3 `i 251  ]
[; ;main.c: 479: i=4;
"479
[e = _i -> -> 4 `i `uc ]
[e :U 251 ]
[; ;main.c: 480: if(flage){
"480
[e $ ! != -> _flage `i -> -> -> 0 `i `uc `i 252  ]
{
[; ;main.c: 481: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO |=(1<<i);
"481
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =| _GPIO -> << -> 1 `i _i `uc ]
"482
}
[; ;main.c: 482: }else{
[e $U 253  ]
[e :U 252 ]
{
[; ;main.c: 483: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));GPIO &=~(1<<i);
"483
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[e =& _GPIO -> ~ << -> 1 `i _i `uc ]
"484
}
[e :U 253 ]
[; ;main.c: 484: }
[; ;main.c: 486: while(!(GPIO & (1<< 3))){
"486
[e $U 254  ]
[e :U 255 ]
{
[; ;main.c: 487: GPIO |=((1<<5)|(1<<4)|(1<<2)|(1<<1));
"487
[e =| _GPIO -> | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
"488
}
[e :U 254 ]
"486
[e $ ! != & -> _GPIO `i << -> 1 `i -> 3 `i -> 0 `i 255  ]
[e :U 256 ]
[; ;main.c: 488: }
[; ;main.c: 490: delay_val=GetADCValue(1<<0);
"490
[e = _delay_val -> ( _GetADCValue (1 -> << -> 1 `i -> 0 `i `uc `us ]
[; ;main.c: 491: my_delay_ms(delay_val);
"491
[e ( _my_delay_ms (1 _delay_val ]
"493
}
"477
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 6 `i 248  ]
[e :U 249 ]
"493
}
"496
}
[e :U 236 ]
"456
[e $ != -> -- _count -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 237  ]
[e :U 238 ]
[; ;main.c: 493: }
[; ;main.c: 496: }
[; ;main.c: 497: GPIO &=~((1<<5)|(1<<4)|(1<<2)|(1<<1));
"497
[e =& _GPIO -> ~ | | | << -> 1 `i -> 5 `i << -> 1 `i -> 4 `i << -> 1 `i -> 2 `i << -> 1 `i -> 1 `i `uc ]
[; ;main.c: 498: }
"498
[e :UE 235 ]
}
